{"version":3,"sources":["components/Home.js","components/Error.js","components/Router.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","Error","Jumbotron","style","display","flexDirection","marginTop","alignItems","Button","variant","color","textDecoration","to","Router","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAEqBA,E,iLAEb,OACI,6BACI,yC,GAJkBC,a,gBCGbC,E,iLAGb,OACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,UAAW,OAAQC,WAAY,WACxF,oCACA,oDAEA,2BACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAU,kBAAC,IAAD,CAAMN,MAAO,CAACO,MAAO,OAAQC,eAAgB,QAASC,GAAG,KAAzD,e,GATXZ,aCEda,E,iLAGb,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IAEjC,kBAAC,IAAD,CAAOiB,UAAWf,U,GARFD,aCGrBiB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dda5fcbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport {Jumbotron, Button} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default class Error extends Component {\n    render() {\n\n        return (\n            <Jumbotron style={{display: 'flex', flexDirection: 'column', marginTop: '2rem', alignItems: 'center' }}>\n                <h1>404!</h1>\n                <p>\n                    PÃ¡gina Inexistente</p>\n                <p>\n                    <Button variant=\"primary\"><Link style={{color: '#FFF', textDecoration: 'none' }}to=\"/\">Home</Link></Button>\n                </p>\n            </Jumbotron>\n        );\n    }\n}","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport Home from './Home';\n\nimport Error from './Error';\n\nexport default class Router extends Component {\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    \n                    <Route component={Error}/>\n                </Switch>\n\n            </BrowserRouter>\n        );\n    }\n}\n","import React from 'react';\n\nimport Router from './components/Router';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}